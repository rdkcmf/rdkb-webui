<?%
/*
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2016 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
/*
	utility functions for files in "actionHandler" folder
*/
//input can only be printable characters, the printable ASCII characters start at the space and end at the tilde
//check if $input[0] is in range $input[1] - $input[2]
?>
<?% include('includes/php.jst'); ?>
<?%
//include_once __DIR__ .'/../CSRF-Protector-PHP/libs/csrf/csrfprotector_rdkb.jst'; /*MROLLINS FIXME*/
//Initialise CSRFGuard library
//csrfprotector_rdkb::init(); /*MROLLINS FIXME*/
?>
<?%
function printableCharacters($input){
	//check only if range is set
	if(is_array($input)){
		$regEx = '/^[ -~]{'+$input[1]+','+$input[2]+'}$/';
		return (preg_match($regEx, $input[0])==1);
	}
	//if range is not set then match for *
	else return (preg_match("/^[ -~]*$/", $input)==1);
}
function noSpace($input){
  //MROLLINS - this appeared not to work as expected so i replaced old one with new one
	//return (preg_match('/\S/',$input)==1);//old one
	return (preg_match('/^\\S*$/',$input)==1);//new one
}
//check if the $IPAddr is a valid IP address[checks for both IPv4 & IPv6]
function validIPAddr($IPAddr){
	if(inet_pton($IPAddr) !== false) return true;
	else return false;
}
//check if the $link is a valid valid URL per the URL spec
function validLink($link){
	return (preg_match("/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/",$link)==1);
}
//check if the $mac is a valid MAC Address
//Note that the first byte of the source address is always even (since the least significant bit, or first bit on the wire indicates that the address is a group address ).
function validMAC($mac){
	//return (preg_match('/^([a-f0-9]{2}:){5}[a-f0-9]{2}$/i', $mac)==1);
	if(preg_match('/^([a-f0-9]{2}:){5}[a-f0-9]{2}$/i', $mac)!=1 || "00:00:00:00:00:00"==$mac || hexdec(substr($mac, 0, 2))%2 != 0) return false;
	else return true;
}
//check if the $port is a valid port number 1 - 65535
function validPort($port){
	return (preg_match("/^[1-9][0-9]{0,3}$|^[1-5][0-9]{4}$|^6[0-4][0-9]{3}$|^65[0-4][0-9]{2}$|^655[0-2][0-9]$|^6553[0-5]$/", $port)==1);
}
//check if the $id is in range 1 - 256
function validId($id){
	return (preg_match("/^[1-9][0-9]{0,1}$|^1[0-9]{2}$|^2[0-4][0-9]$|^25[0-6]$/", $id)==1);
}
//for Parental Control $id can be 10_12 or 10
function validId_PC($id){
	$idRegEx = "/^[1-9][0-9]{0,1}$|^1[0-9]{2}$|^2[0-4][0-9]$|^25[0-6]$/";
	$ids = explode('_', $id);
	if (array_key_exists('1', $ids)) return (preg_match($idRegEx, $ids[0])==1 && preg_match($idRegEx, $ids[1])==1);
	else return (preg_match($idRegEx, $ids[0])==1);
}
//check if the parameter is in array
function isValInArray($val, $valArray){
	if(in_array($val, $valArray, true)) return true;
	else return false;
}
//check if the $val is in range $min - $max
function isValInRange($val, $min, $max){
	if($val >= $min && $val <= $max) return true;
	else return false;
}
//check if the $url is valid
function validURL($url){
  if (RegExp(/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/).test($url, 'giu'))
    return true;
  if (RegExp(/^(https?|s?ftp):\/\/\[((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))]?(\:[0-9]+)*(\/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*$/).test($url, 'giu'))
    return true;
  return false;
}

//check if the $startTime is less than $endTime and Time is in range 00:00-23:59
function validTime($startTime, $endTime){
	//range 00:00-23:59
	$start_hm 	= explode(':', $startTime);
	$end_hm 	= explode(':', $endTime);
	//hours
	$hourRegEX 		= '/^(0)?\\d$|^([1]\\d)$|^(2[0-3])$/';
	//start min can only be	00 15 30 45
	$startMinRegEX	= '/^00$|^15$|^30$|^45$/';
	//end min can only be 00 15 30 45 59
	$endMinRegEX	= '/^00$|^15$|^30$|^45$|^59$/';
	$start_min 	= (parseInt($start_hm[0],10)*60)+parseInt($start_hm[1],10);
	$end_min 	= (parseInt($end_hm[0],10)*60)+parseInt($end_hm[1],10);
	if(preg_match($hourRegEX, $start_hm[0])==1 && 
     preg_match($startMinRegEX, $start_hm[1])==1 && 
     preg_match($hourRegEX, $end_hm[0])==1 && 
     preg_match($endMinRegEX, $end_hm[1])==1 && 
    ($start_min < $end_min)) 
    return true;
	else
    return false;
}
//check if the $day is of array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun") only
function validDays($day){
	$validation = true;
	$day = explode(",",$day);
	$allDays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]/*p2j-array*/;
	for(var $keytmp in $day) { $value=$day[$keytmp];/*p2j-foreach*/
		if (!in_array($value, $allDays)){
			$validation = false;
			break;
		}
	}
	return $validation;
}
//check if $ssid_name is as per specs
function valid_ssid_name($ssid_name){
	$ssid_name = strtolower($ssid_name);
	//1 to 32 ASCII characters
	$ssid_name_check = (preg_match('/^[ -~]{1,32}$/', $ssid_name) == 1);
	//SSID name cannot contain only spaces
	$not_only_spaces_check = (preg_match('/^\\s+$/', $ssid_name) != 1);
	//SSID Starting with "XHS-" and "XH-" are reserved
	$not_hhs_check  = (preg_match('/^xhs-|^xh-|^chl-|^rshm-|^shs-|^vlhs-/', $ssid_name) != 1);
	//SSID containing "optimumwifi", "TWCWiFi", "cablewifi" and "xfinitywifi" are reserved
	$ssid_name = $ssid_name.replace(/[\.,-\/#@!$%\^&\*;:{}=+?\-_`~()"\'\\|<>\[\]\s]/g, '');
	$not_hhs2_check = !((strpos($ssid_name, 'cablewifi') !== false) || (strpos($ssid_name, 'twcwifi') !== false) || (strpos($ssid_name, 'optimumwifi') !== false) || (strpos($ssid_name, 'xfinitywifi') !== false) || (strpos($ssid_name, 'xfinity') !== false) || (strpos($ssid_name, 'coxwifi') !== false) || (strpos($ssid_name, 'spectrumwifi') !== false)  || (strpos($ssid_name, 'shawopen') !== false)  || (strpos($ssid_name, 'shawpasspoint') !== false) || (strpos($ssid_name, 'shawguest') !== false) || (strpos($ssid_name, 'shawmobilehotspot') !== false) || (strpos($ssid_name, 'shawgo') !== false) || (strpos($ssid_name, 'panoramicwifi') !== false)|| (strpos($ssid_name, 'panoramic') !== false)|| (strpos($ssid_name, 'panowifi') !== false) || (strpos($ssid_name, 'outofservice') !== false) );
	return $ssid_name_check && $not_only_spaces_check && $not_hhs_check && $not_hhs2_check;
}
//check if $name has any Invalid characters
//Invalid characters are Less than (<), Greater than (>), Ampersand (&), Double quote ("), Single quote ('), Pipe (|).
function is_allowed_string($name){
	return (preg_match('/[<>&"\'|]/', $name)!=1);
}

function remove_special_char($name){
	return (preg_match('/[!@#$%^&*(),?":{}|<>]/', $name)!=1);
}

function ip2long($IP) {
    var i = 0;
    $IP = $IP.match( /^([1-9]\d*|0[0-7]*|0x[\da-f]+)(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?(?:\.([1-9]\d*|0[0-7]*|0x[\da-f]+))?$/i );
    if (!$IP) { return false; }
    $IP[0] = 0;
    for (i = 1; i < 5; i += 1) {
      $IP[0] += !!(($IP[i] || '').length);
      $IP[i] = parseInt($IP[i]) || 0;
    }
    $IP.push(256, 256, 256, 256);
    $IP[4 + $IP[0]] *= Math.pow(256, 4 - $IP[0]);
    if ($IP[1] >= $IP[5] || $IP[2] >= $IP[6] || $IP[3] >= $IP[7] || $IP[4] >= $IP[8]) { return false; }
    return $IP[1] * ($IP[0] === 1 || 16777216) + $IP[2] * ($IP[0] <= 2 || 65536) + $IP[3] * ($IP[0] <= 3 || 256) + $IP[4] * 1;
  }
function long2ip ( $long_address ) {

    var output = false;

    if ( !isNaN ( $long_address ) && ( $long_address >= 0 || $long_address <= 4294967295 ) ) {
        output = Math.floor ($long_address / Math.pow ( 256, 3 ) ) + '.' +
            Math.floor ( ( $long_address % Math.pow ( 256, 3 ) ) / Math.pow ( 256, 2 ) ) + '.' +
            Math.floor ( ( ( $long_address % Math.pow ( 256, 3 ) )  % Math.pow ( 256, 2 ) ) / Math.pow ( 256, 1 ) ) + '.' +
            Math.floor ( ( ( ( $long_address % Math.pow ( 256, 3 ) ) % Math.pow ( 256, 2 ) ) % Math.pow ( 256, 1 ) ) / Math.pow ( 256, 0 ) );
    }

    return output;
}
function array_key_exists($key,$arr)
{
  for(var k in $arr)
  {
    if(k === $key)
      return true;
  }
  return false;
}
function array_key_exists_int($key,$arr)
{
  for(var k in $arr)
  {
    if(parseInt(k) === parseInt($key))
      return true;
  }
  return false;
}

function array_unique($array){
    return $array.filter(function(el, index, arr) {
        return index == arr.indexOf(el);
    });
}

//Bitwise operations (& | etc) on big numbers
function bitwise_BigNum(v1, v2, op) {
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var hi1 = ~~(v1 / hi);
    var hi2 = ~~(v2 / hi);
    var low1 = v1 & low;
    var low2 = v2 & low;
    if (op == 'AND') {
        var h = hi1 & hi2;
        var l = low1 & low2;
    } else if (op == 'OR') {
        h = hi1 | hi2;
        l = low1 | low2;
    } else {
        // not supported operation
        return 0;
    }
    return h*hi + l;
}
?>

<?%
/*
 * Set the Locale for the Web UI based on the LANG setting or current linux locale
 */
$locale = getenv("LANG");
if(isset($locale)) {
    if(!isset($_SESSION['language']) || exec("export LC_MESSAGES=0") != $locale){
        exec("export LC_MESSAGES="+$locale);
        exec("export LC_TIME="+$locale);

        $domain = "rdkb";
        bindtextdomain($domain, 'locales');
        bind_textdomain_codeset($domain, 'UTF-8');
        textdomain($domain);
        $_SESSION['language'] = $locale; // set the default locale for future pages
    }
}
?>
