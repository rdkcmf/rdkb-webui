<?%
/*
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2016 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
?>
<?% include('includes/utility.jst') ?>
<?% include('includes/actionHandlerUtility.jst') ?>
<?%
session_start();
if ($_SESSION["loginuser"] == "" || $_SESSION["loginuser"] == false || $_SESSION['loginuser'] != 'mso') {
	echo( '<script type="text/javascript">alert("Please Login First!"); location.href="../index.jst";</script>');
	exit(0);
}
$result="";
function PORTTEST($sport,$eport,$arraySPort,$arrayEPort) {
	//echo $sport."  ".$eport."  ".$arraySPort."  ".$arrayEPort."<hr/>";
	if ( ($sport>=$arraySPort) && ($sport<=$arrayEPort) ){
		return 1;
	}
	else if ( ($eport>=$arraySPort) && ($eport<=$arrayEPort) ){
		return 1;
	}
	else if ( ($sport<$arraySPort) && ($eport>$arrayEPort) ){
		return 1;
	}
	else 
		return 0;
}
if (isset($_POST['set'])){
	if (isValInArray($_POST['UHSPStatus'], ["Enabled", "Disabled"]/*p2j-array*/)){
		$UHSPStatus=(($_POST['UHSPStatus']=="Enabled")?"true":"false");
		setStr("Device.NAT.X_Comcast_com_EnableHSPortMapping",$UHSPStatus,true);
		while(getStr("Device.NAT.X_Comcast_com_EnableHSPortMapping")!=$UHSPStatus) sleep(2);
		// $UHSPStatus=(getStr("Device.NAT.X_Comcast_com_EnableHSPortMapping")=="true"?"Enabled":"Disabled");
		// echo json_encode($UHSPStatus);
	}
}
if (isset($_POST['add'])) {
	$validation = true;
	if($validation) $validation = printableCharacters($_POST['name']);
	if($validation) $validation = is_allowed_string($_POST['name']);
	if($validation) $validation = isValInArray($_POST['type'], ['TCP', 'UDP', 'TCP/UDP']/*p2j-array*/);
	if($validation) $validation = validIPAddr($_POST['ip']);
	if($validation) $validation = validPort($_POST['startport']);
	if($validation) $validation = validPort($_POST['endport']);
	if($validation) $validation = validPort($_POST['priport']);
	if($validation) $validation = isValInArray($_POST['enportrange'], ['true', 'false']/*p2j-array*/);
	if($validation) {
		$name=$_POST['name'];
		$type=$_POST['type'];
		if ($type=="TCP/UDP") $type="BOTH";
		$ip=$_POST['ip'];
		$startport=$_POST['startport'];
		$endport=$_POST['endport'];
		$priport=$_POST['priport'];
		$enportrange=$_POST['enportrange']; // string "true" / "false"
		$enableHSEntry = 'true';  // set 'true' to default value
		if (getStr("Device.NAT.PortMappingNumberOfEntries")==0) {	//no table, need test whether it equals 0
			addTblObj("Device.NAT.PortMapping.");
			$IDs=explode(",",getInstanceIDs("Device.NAT.PortMapping."));
			$i=$IDs[count($IDs)-1];
			$rootObjName ="Device.NAT.PortMapping.";
			$paramArray = 
				[
					["Device.NAT.PortMapping."+$i+".Enable", "bool", $enableHSEntry],
					["Device.NAT.PortMapping."+$i+".InternalClient", "string", $ip],
					["Device.NAT.PortMapping."+$i+".InternalPort", "uint", $priport],
					["Device.NAT.PortMapping."+$i+".ExternalPort", "uint", $startport],
					["Device.NAT.PortMapping."+$i+".ExternalPortEndRange", "uint", $endport],
					["Device.NAT.PortMapping."+$i+".Protocol", "string", $type],
					["Device.NAT.PortMapping."+$i+".Description", "string", $name],
				];
			$retStatus = DmExtSetStrsWithRootObj($rootObjName, true, $paramArray);
			if (!$retStatus){$result=_("Success!");}	
		} 
		else {
			//$result="";
			$rootObjName    = "Device.NAT.PortMapping.";
			$paramNameArray = ["Device.NAT.PortMapping."]/*p2j-array*/;
			$mapping_array  = ["LeaseDuration", "Description", "InternalClient", "Protocol", "ExternalPort", "ExternalPortEndRange", "InternalPort"]/*p2j-array*/;
			$portMappingValues = getParaValues($rootObjName, $paramNameArray, $mapping_array);
			for(var $keytmp in $portMappingValues) { $key=$portMappingValues[$keytmp];/*p2j-foreach*/
				if ($key["LeaseDuration"]==0){
					$arrayName = $key["Description"];
					$arrayIP = $key["InternalClient"];
					$arrayType = $key["Protocol"];
					$arraySPort = $key["ExternalPort"];
					$arrayEPort = $key["ExternalPortEndRange"];
					$InternalPort = $key["InternalPort"];
					if($name==$arrayName) {
						if($InternalPort !=0){
							$result+=_("Service name has been used in HS Port Forwarding service!\n");
							break;
						} else {
							$result+=_("Service name has been used in Port Forwarding service!\n");
							break;
						}
					} else if($type=="BOTH"||$arrayType=="BOTH"||$type==$arrayType){
						if($arrayIP==$ip && $InternalPort==$priport){
							if($InternalPort !=0){
								$result+=_("Conflict with other HS Port Forwarding service. Please check Private Port(s) and IP!");
								break;
							} else {
								$result+=_("Conflict with other Port Forwarding service. Please check port and IP!");
								break;
							}
						}
						else{
							$porttest=PORTTEST(parseInt($startport),parseInt($endport),parseInt($arraySPort),parseInt($arrayEPort));
							if ($porttest==1) {
								if($InternalPort !=0){
									$result+=_("Conflict with other HS Port Forwarding service. Please check Public port and IP!");
									break;
								} else {
									$result+=_("Failure! As Port Triggering/Port Forwarding rule exists for the same port.");
									break;
								}
							}
						}
					}
				}
			}		
			if ($result=="") {
				addTblObj("Device.NAT.PortMapping.");
				$IDs=explode(",",getInstanceIDs("Device.NAT.PortMapping."));
				$i=$IDs[count($IDs)-1];
				$rootObjName ="Device.NAT.PortMapping.";
				$paramArray = 
					[
						["Device.NAT.PortMapping."+$i+".Enable", "bool", $enableHSEntry],
						["Device.NAT.PortMapping."+$i+".InternalClient", "string", $ip],
						["Device.NAT.PortMapping."+$i+".InternalPort", "uint", $priport],
						["Device.NAT.PortMapping."+$i+".ExternalPort", "uint", $startport],
						["Device.NAT.PortMapping."+$i+".ExternalPortEndRange", "uint", $endport],
						["Device.NAT.PortMapping."+$i+".Protocol", "string", $type],
						["Device.NAT.PortMapping."+$i+".Description", "string", $name],
					];
				$retStatus = DmExtSetStrsWithRootObj($rootObjName, true, $paramArray);
				if (!$retStatus){$result=_("Success!");}	
			}
		}

		if ($result=="") {

                                /*
                        * this piece of code is going to check forward start port and end port not overlapped with port triggering entry
                        */
                        $ids=explode(",",getInstanceIDs("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."));
                        for(var $key in $ids) { var $j=$ids[$key];/*p2j-foreach*/

                                        $arrayType = getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".TriggerProtocol");
                                        $arraySPort=getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".ForwardPortStart");
                                        $arrayEPort=getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".ForwardPortEnd");
                                        if($type=="BOTH" || $arrayType=="BOTH" || $type==$arrayType){
                                                $porttest=PORTTEST(parseInt($startport),parseInt($endport),parseInt($arraySPort),parseInt($arrayEPort));
                                                if ($porttest==1) {
                                                        $result+=_("Failure! As Port Triggering/Port Forwarding rule exists for the same port.");
                                                        break;
                                                }
                                        }

                        } //end of foreach

                }
	}
}
if (isset($_POST['edit'])){
	$validation = true;
	if($validation) $validation = validId($_POST['id']);
	if($validation) $validation = printableCharacters($_POST['name']);
	if($validation) $validation = is_allowed_string($_POST['name']);
	if($validation) $validation = isValInArray($_POST['type'], ['TCP', 'UDP', 'TCP/UDP']/*p2j-array*/);
	if($validation) $validation = validIPAddr($_POST['ip']);
	if($validation) $validation = validPort($_POST['startport']);
	if($validation) $validation = validPort($_POST['endport']);
	if($validation) $validation = validPort($_POST['priport']);
	if($validation) $validation = isValInArray($_POST['enportrange'], ['true', 'false']/*p2j-array*/);
	if($validation) {
		//data:{edit:"true",id:id,name:name,type:type,ip:ip,startport:startport,endport:endport,priport:priport,enportrange:enportrange},
		$i=$_POST['id'];
		$name=$_POST['name'];
		$type=$_POST['type'];
		if ($type=="TCP/UDP") $type="BOTH";
		$ip=$_POST['ip'];
		$sport=$_POST['startport'];
		$eport=$_POST['endport'];
		$priport=$_POST['priport'];
		$enportrange=$_POST['enportrange'];
		// $result="";
		$rootObjName    = "Device.NAT.PortMapping.";
		$paramNameArray = ["Device.NAT.PortMapping."]/*p2j-array*/;
		$mapping_array  = ["LeaseDuration", "Description", "InternalClient", "Protocol", "ExternalPort", "ExternalPortEndRange", "InternalPort"]/*p2j-array*/;
		$portMappingValues = getParaValues($rootObjName, $paramNameArray, $mapping_array, true);
		for(var $keytmp in $portMappingValues) { $key=$portMappingValues[$keytmp];/*p2j-foreach*/
			$j = $key["__id"];
			if ($i==$j) continue;
			if ($key["LeaseDuration"]==0){
				$arrayName 		= $key["Description"];
				$arrayIP 		= $key["InternalClient"];
				$arrayType 		= $key["Protocol"];
				$arraySPort 	= $key["ExternalPort"];
				$arrayEPort 	= $key["ExternalPortEndRange"];
				$InternalPort 	= $key["InternalPort"];
				if($name==$arrayName) { 
					if($InternalPort !=0){
						$result+=_("Service name has been used in HS Port Forwarding service!\n");
						break;
					} else {
						$result+=_("Service name has been used in Port Forwarding service!\n");
						break;
					}
				}
				else if($type=="BOTH"||$arrayType=="BOTH"||$type==$arrayType){
					if($arrayIP==$ip && $InternalPort==$priport){
						if($InternalPort !=0){
							$result+=_("Conflict with other HS Port Forwarding service. Please check Private Port(s) and IP!");
							break;
						} else {
							$result+=_("Conflict with other Port Forwarding service. Please check port and IP!");
							break;
						}
					}
					else{
						$porttest=PORTTEST(parseInt($sport),parseInt($eport),parseInt($arraySPort),parseInt($arrayEPort));
						if ($porttest==1) {
							if($InternalPort !=0){
								$result+=_("Conflict with other HS Port Forwarding service. Please check Public port and IP!");
								break;
							} else {
								$result+=_("Failure! As Port Triggering/Port Forwarding rule exists for the same port.");
								break;
							}
						}
					}
				}
			}
		}
		if ($result=="") {
			$rootObjName ="Device.NAT.PortMapping.";
			$paramArray = 
				[
					["Device.NAT.PortMapping."+$i+".Enable", "bool", $enportrange],
					["Device.NAT.PortMapping."+$i+".InternalClient", "string", $ip],
					["Device.NAT.PortMapping."+$i+".InternalPort", "uint", $priport],
					["Device.NAT.PortMapping."+$i+".ExternalPort", "uint", $sport],
					["Device.NAT.PortMapping."+$i+".ExternalPortEndRange", "uint", $eport],
					["Device.NAT.PortMapping."+$i+".Protocol", "string", $type],
					["Device.NAT.PortMapping."+$i+".Description", "string", $name],
				];
			$retStatus = DmExtSetStrsWithRootObj($rootObjName, true, $paramArray);	
			if (!$retStatus){$result=_("Success!");}
		}

		if ($result=="") {

                                /*
                        * this piece of code is going to check forward start port and end port not overlapped with port triggering entry
                        */
                        $ids=explode(",",getInstanceIDs("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."));
                        for(var $key in $ids) { var $j=$ids[$key];/*p2j-foreach*/

                                        $arrayType = getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".TriggerProtocol");
                                        $arraySPort=getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".ForwardPortStart");
                                        $arrayEPort=getStr("Device.NAT.X_CISCO_COM_PortTriggers.Trigger."+$j+".ForwardPortEnd");
                                        if($type=="BOTH" || $arrayType=="BOTH" || $type==$arrayType){
                                                $porttest=PORTTEST(parseInt($sport),parseInt($eport),parseInt($arraySPort),parseInt($arrayEPort));
                                                if ($porttest==1) {
                                                        $result+=_("Failure! As Port Triggering/Port Forwarding rule exists for the same port.");
                                                        break;
                                                }
                                        }

                        } //end of foreach

                }

	}
}
if (isset($_POST['active'])){
	$validation = true;
	if($validation) $validation = isValInArray($_POST['isChecked'], ['true', 'false']/*p2j-array*/);
	if($validation) $validation = validId($_POST['id']);
	if($validation) {
		//this is to enable/disable PortActive
		$isChecked=$_POST['isChecked'];
		$i=$_POST['id'];
		if (setStr("Device.NAT.PortMapping."+$i+".Enable",$isChecked,true) === true) {
			$result=_("Success!");
		}
	}
}
if (isset($_POST['del'])){
	$validation = true;
	if($validation) $validation = validId($_POST['del']);
	if($validation) delTblObj("Device.NAT.PortMapping."+$_POST['del']+".");
}


//to delete zero entry
$ids=explode(",",getInstanceIds("Device.NAT.PortMapping."));
        for($key in $ids) { $j=$ids[$key];/*p2j-foreach*/
                $sPort= getStr("Device.NAT.PortMapping."+$j+".ExternalPort");
                $ePort=getStr("Device.NAT.PortMapping."+$j+".ExternalPortEndRange");

        if (($sPort==0) && ($ePort==$sPort)) {
                delTblObj("Device.NAT.PortMapping."+$j+".");
        }
        } //end of foreach

header("Content-Type: application/json");
echo( json_encode($result));
?>
